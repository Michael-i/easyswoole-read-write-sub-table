<?php
/**
 * Created by PhpStorm.
 * User: 林育成
 * Date: 2023/1/6
 * Time: 9:40
 */

namespace EasyswooleYc\ReadWriteSubTable\Read;

use App\DAO\BaseDAO;

abstract class VerticalSubQuery extends BaseDAO
{
    /** @var string 主表表名 */
    protected static $mainTableName;
    /** @var array 分表配置 */
    protected $subClass = [];

    ############################ -- 重写ActiveQuery查询函数 -- #############################

    public function avg($field)
    {
        $subClassSelect = $this->dealFirstSelect($field);
        if (!$subClassSelect) {
            return parent::avg($field); // TODO: Change the autogenerated stub
        }
        list($className, $select) = $subClassSelect;
        // 获取关联主表键值
        $this->setMainRelation($className);
        $mainRelationIds = parent::column();
        // 返回子表查询字段
        return (self::getSubClassInstance($className))->avg($mainRelationIds, $select);
    }
    public function sum($field)
    {
        $subClassSelect = $this->dealFirstSelect($field);
        if (!$subClassSelect) {
            return parent::sum($field); // TODO: Change the autogenerated stub
        }

        list($className, $select) = $subClassSelect;
        // 获取关联主表键值
        $this->setMainRelation($className);
        $mainRelationIds = parent::column();
        // 返回子表查询字段
        return (self::getSubClassInstance($className))->sum($mainRelationIds, $select);
    }
    public function min($field)
    {
        $subClassSelect = $this->dealFirstSelect($field);
        if (!$subClassSelect) {
            return parent::min($field); // TODO: Change the autogenerated stub
        }
        list($className, $select) = $subClassSelect;
        // 获取关联主表键值
        $this->setMainRelation($className);
        $mainRelationIds = parent::column();
        // 返回子表查询字段
        return (self::getSubClassInstance($className))->min($mainRelationIds, $select);
    }
    public function max($field)
    {
        $subClassSelect = $this->dealFirstSelect($field);
        if (!$subClassSelect) {
            return parent::max($field); // TODO: Change the autogenerated stub
        }
        list($className, $select) = $subClassSelect;
        // 获取关联主表键值
        $this->setMainRelation($className);
        $mainRelationIds = parent::column();
        // 返回子表查询字段
        return (self::getSubClassInstance($className))->max($mainRelationIds, $select);
    }
    public function scalar(?string $column = null)
    {
        // 判断主表查询字段第一个是否为子表字段
        $subClassSelect = $this->dealFirstSelect($column);
        if (!$subClassSelect) {
            return parent::scalar($column);
        }
        list($className, $select) = $subClassSelect;
        // 获取关联主表键值
        $this->setMainRelation($className);
        $mainRelationId = parent::scalar();
        // 返回子表查询字段
        return (self::getSubClassInstance($className))->scalar($mainRelationId, $select);
    }
    public function column(?string $column = null): ?array
    {
        // 判断主表查询字段第一个是否为子表字段
        $subClassSelect = $this->dealFirstSelect($column);
        if (!$subClassSelect) {
            return parent::column($column);
        }
        list($className, $select) = $subClassSelect;
        $this->setMainRelation($className);
        $mainRelationIds = parent::column();
        return (self::getSubClassInstance($className))->column($mainRelationIds, $select);
    }
    public function all($where = null)
    {
        // 处理查询的字段是否包含子表，在子表则去除，并保存
        $subClassSelect = $this->dealSelect();
        $list = parent::all($where);
        // 合并子表数据
        foreach ($subClassSelect as $className => $select) {
            (self::getSubClassInstance($className))->all($list, $select);
        }
        return $list;
    }
    public function get($where = null)
    {
        // 处理查询的字段是否包含子表，在子表则去除，并保存
        $subClassSelect = $this->dealSelect();
        $data = parent::get($where);

        // 合并子表数据
        foreach ($subClassSelect as $className => $select) {
            (self::getSubClassInstance($className))->get($data, $select);
        }
        return $data;
    }

    ################  -- 内部私有函数 --  ############

    /** @var array 子表实例 */
    private static $subClassInstance = [];
    /** @var string 主表别名 */
    private $mainAlias;
    /**
     * 获取子表实例
     * @param string 类名
     * @return SubInterface
     */
    private static function getSubClassInstance($className)
    {
        if (!isset(self::$subClassInstance[$className]) || !self::$subClassInstance[$className]) {
            self::$subClassInstance[$className] = new $className();
        }
        return self::$subClassInstance[$className];
    }
    /**
     * 设置主表关联键字段
     * @param string 主表名
     * @return string
     */
    private function setMainRelation($className)
    {
        $mainField = $this->getMainRelationKey($className);
        $this->field($mainField);
    }
    /**
     * 获取主表关联键字段
     * @param string 主表名
     * @return string
     */
    private function getMainRelationKey($className)
    {
        $subClass = self::getSubClassInstance($className);
        $mainField = $this->getMainAlias()
            ? "{$this->getMainAlias()}.{$subClass->mainRelationKey()}"
            : static::$mainTableName . "." .$subClass->mainRelationKey();
        return $mainField;
    }
    private function dealFirstSelect($select = null)
    {
        $subSelectClass = $this->getSubSelectClass();
        $select = $select ? $select : current($this->select);
        $select = $this->checkMainSelect($select);
        if (!$select || $select == '*') {
            return [];
        }
        if (!isset($subSelectClass[$select])) {
            return [];
        }
        return [$subSelectClass[$select], $select];
    }
    private function dealSelect()
    {
        // 整理子表字段对应关系
        $subSelectClass = $this->getSubSelectClass();
        $subClasses = [];
        is_null($this->select) && $this->select = ['*'];
        foreach ($this->select as $key => $select){
            // 检验是否为主表字段
            $select = $this->checkMainSelect($select);
            if (!$select) {
                continue;
            }
            // 是否查询全部
            if ($select == '*') {
                $subClasses = [];
                foreach ($this->subClass as $subClass){
                    $subClasses[$subClass] = $subClass::getSelect();
                }
                return $subClasses;
            }
            // 查询部分字段
            if (isset($subSelectClass[$select])) {
                $subClasses[$subSelectClass[$select]][] = $select;
                unset($this->select[$key]);
            }
        }
        // 补上主表关联键字段，至少要有主键关联字段关联查询
        if ($subClasses) {
            $key = $this->getMainRelationKey(key($subClasses));
            $fields = array_unique(array_merge($this->select, [$key]));
            $this->field($fields);
        }
        return $subClasses;
    }
    private function checkMainSelect($select)
    {
        $selects = explode('.', $select);
        // 有表别名且表别名不是主表别名则跳过
        $hadTableAlias = isset($selects[1]);
        if ($hadTableAlias && $selects[0] != $this->getMainAlias() && $selects[0] != static::$mainTableName) {
            return false;
        }
        // 无别名的可能是级联表的，但后面会判断表字段与子表字段相同条件，相同且无表名那一定是主表的
        return $hadTableAlias ? $selects[1] : $selects[0];
    }
    private function getSubSelectClass()
    {
        $subSelectClass = [];
        foreach ($this->subClass as $subClass){
            foreach ($subClass::getSelect() as $select) {
                $subSelectClass[$select] = $subClass;
            }
        }
        return $subSelectClass;
    }
    /** 获取主表别名 */
    private function getMainAlias()
    {
        // 已存在的缓存
        if ($this->mainAlias) {
            return $this->mainAlias;
        }
        // 主表里提取别名
        if ($this->getTableName() == static::$mainTableName) {
            $this->alias && $this->mainAlias = $this->alias;
            return $this->mainAlias;
        }
        // 连表里可能存在别名
        foreach ($this->joinTables as $from) {
            $from = explode(' ', $from);
            if ($from[0] != static::$mainTableName) {
                continue;
            }
            $this->mainAlias = isset($from[1]) ? $from[1] : $from[0];
        }
        return $this->mainAlias;
    }

    ###############  函数重写 - 获取模型数据 ##################

    /** @var array 查询字段 */
    private $select;
    /** @var array 连表表名 */
    private $joinTables = [];
    /** @var string 表别名 */
    private $alias;

    public function field($fields)
    {
        if (!is_array($fields)) {
            $fields = [$fields];
        }
        $this->select = $fields;
        return parent::field($fields); // TODO: Change the autogenerated stub
    }
    public function join($joinTable, $joinCondition, $joinType = '')
    {
        $this->joinTables[] = $joinTable;
        return parent::join($joinTable, $joinCondition, $joinType); // TODO: Change the autogenerated stub
    }
    public function alias($alias)
    {
        $this->alias = $alias;
        return parent::alias($alias); // TODO: Change the autogenerated stub
    }
}